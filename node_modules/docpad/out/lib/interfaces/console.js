// Generated by CoffeeScript 1.3.3
(function() {
  var ConsoleInterface, cliColor, pathUtil,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  cliColor = require('caterpillar').cliColor;

  pathUtil = require('path');

  ConsoleInterface = (function() {

    function ConsoleInterface(opts, next) {
      this.watch = __bind(this.watch, this);

      this.skeleton = __bind(this.skeleton, this);

      this.clean = __bind(this.clean, this);

      this.server = __bind(this.server, this);

      this.run = __bind(this.run, this);

      this.render = __bind(this.render, this);

      this.install = __bind(this.install, this);

      this.info = __bind(this.info, this);

      this.help = __bind(this.help, this);

      this.generate = __bind(this.generate, this);

      this.selectSkeletonCallback = __bind(this.selectSkeletonCallback, this);

      this.extractConfig = __bind(this.extractConfig, this);

      this.completeAction = __bind(this.completeAction, this);

      this.performAction = __bind(this.performAction, this);

      this.wrapAction = __bind(this.wrapAction, this);

      this.handleError = __bind(this.handleError, this);

      this.getCommander = __bind(this.getCommander, this);

      this.start = __bind(this.start, this);

      var commander, consoleInterface, docpad, version;
      consoleInterface = this;
      this.docpad = docpad = opts.docpad;
      this.commander = commander = require('commander');
      version = require(__dirname + '/../../../package.json').version;
      commander.version(version).option('-o, --out <outPath>', "where to output the rendered files (to a directory) or file (to an output file)").option('-c, --config <configPath>', "a custom configuration file to load in").option('-e, --env <environment>', "the environment name to use for this instance, multiple names can be separated with a comma").option('-d, --debug [logLevel]', "the level of debug messages you would like to display, if specified defaults to 7, otherwise 6", parseInt).option('-f, --force', "force a re-install of all modules");
      commander.command('run').description('does everyting: skeleton, generate, watch, server').option('-s, --skeleton <skeleton>', "for new projects, instead of being asked for the skeleton, you can specify it here").option('-p, --port <port>', "a custom port to use for the server <port>", parseInt).action(consoleInterface.wrapAction(consoleInterface.run));
      commander.command('server').description('creates a server for your generated project').option('-p, --port <port>', "a custom port to use for the server <port>", parseInt).action(consoleInterface.wrapAction(consoleInterface.server));
      commander.command('skeleton').description('will create a new project in your cwd based off an existing skeleton').option('-s, --skeleton <skeleton>', "instead of being asked for the skeleton, you can specify it here").action(consoleInterface.wrapAction(consoleInterface.skeleton));
      commander.command('render [path]').description("render the file at <path> and output its results to stdout").action(function(command) {
        var _ref;
        if ((_ref = commander.debug) == null) {
          commander.debug = 5;
        }
        commander.checkVersion = false;
        return consoleInterface.performAction(command, consoleInterface.render);
      });
      commander.command('generate').description("(re)generates your project").action(consoleInterface.wrapAction(consoleInterface.generate));
      commander.command('watch').description("watches your project for changes, and (re)generates whenever a change is made").action(consoleInterface.wrapAction(consoleInterface.watch));
      commander.command('install').description("ensure everything is installed correctly").action(consoleInterface.wrapAction(consoleInterface.install));
      commander.command('clean').description("ensure everything is cleaned correctly (will remove your out directory)").action(consoleInterface.wrapAction(consoleInterface.clean));
      commander.command('info').description("display the information about your docpad instance").action(consoleInterface.wrapAction(consoleInterface.info));
      commander.command('help').description("output the help").action(consoleInterface.wrapAction(consoleInterface.help));
      commander.command('*').description("anything else ouputs the help").action(function() {
        return commander.emit('help', []);
      });
      docpad.emitSync('consoleSetup', {
        consoleInterface: consoleInterface,
        commander: commander
      }, function(err) {
        if (err) {
          return consoleInterface.handleError(err);
        }
        return next(null, consoleInterface);
      });
      this;

    }

    ConsoleInterface.prototype.start = function(argv) {
      this.commander.parse(argv || process.argv);
      return this;
    };

    ConsoleInterface.prototype.getCommander = function() {
      return this.commander;
    };

    ConsoleInterface.prototype.handleError = function(err) {
      var docpad;
      docpad = this.docpad;
      docpad.log('error', "Something went wrong with the action");
      docpad.error(err);
      process.exit(1);
      return this;
    };

    ConsoleInterface.prototype.wrapAction = function(action) {
      var consoleInterface;
      consoleInterface = this;
      return function(command) {
        return consoleInterface.performAction(command, action);
      };
    };

    ConsoleInterface.prototype.performAction = function(command, action) {
      var instanceConfig,
        _this = this;
      instanceConfig = this.extractConfig(command);
      this.docpad.action('load ready', instanceConfig, function(err) {
        if (err) {
          return _this.completeAction(err);
        }
        return action(_this.completeAction);
      });
      return this;
    };

    ConsoleInterface.prototype.completeAction = function(err) {
      if (err) {
        this.handleError(err);
      } else {
        this.docpad.log('info', "The action completed successfully");
      }
      return this;
    };

    ConsoleInterface.prototype.extractConfig = function(customConfig) {
      var commanderConfig, config, configPath, key, outPath, sourceConfig, value;
      if (customConfig == null) {
        customConfig = {};
      }
      config = {};
      commanderConfig = this.commander;
      sourceConfig = this.docpad.initialConfig;
      if (commanderConfig.debug) {
        if (commanderConfig.debug === true) {
          commanderConfig.debug = 7;
        }
        commanderConfig.logLevel = commanderConfig.debug;
      }
      if (commanderConfig.config) {
        configPath = pathUtil.resolve(process.cwd(), commanderConfig.config);
        commanderConfig.configPaths = [configPath];
      }
      if (commanderConfig.out) {
        outPath = pathUtil.resolve(process.cwd(), commanderConfig.out);
        commanderConfig.outPath = outPath;
      }
      for (key in commanderConfig) {
        if (!__hasProp.call(commanderConfig, key)) continue;
        value = commanderConfig[key];
        if (sourceConfig[key] != null) {
          config[key] = value;
        }
      }
      for (key in customConfig) {
        if (!__hasProp.call(customConfig, key)) continue;
        value = customConfig[key];
        if (sourceConfig[key] != null) {
          config[key] = value;
        }
      }
      return config;
    };

    ConsoleInterface.prototype.selectSkeletonCallback = function(skeletonsCollection, next) {
      var commander, docpad, skeletonNames;
      commander = this.commander;
      docpad = this.docpad;
      skeletonNames = [];
      console.log(cliColor.bold('You are about to create your new project inside your current directory. Below is a list of skeletons to bootstrap your new project:\n'));
      skeletonsCollection.forEach(function(skeletonModel) {
        var skeletonDescription, skeletonName;
        skeletonName = skeletonModel.get('name');
        skeletonDescription = skeletonModel.get('description').replace(/\n/g, '\n\t');
        skeletonNames.push(skeletonName);
        return console.log("\t" + (cliColor.bold(skeletonName)) + "\n\t" + skeletonDescription + "\n");
      });
      console.log(cliColor.bold('Which skeleton will you use?'));
      commander.choose(skeletonNames, function(i) {
        return next(null, skeletonsCollection.at(i));
      });
      return this;
    };

    ConsoleInterface.prototype.generate = function(next) {
      this.docpad.action('generate', next);
      return this;
    };

    ConsoleInterface.prototype.help = function(next) {
      var help;
      help = this.commander.helpInformation();
      console.log(help);
      next();
      return this;
    };

    ConsoleInterface.prototype.info = function(next) {
      var info;
      info = require('util').inspect(this.docpad.config);
      console.log(info);
      next();
      return this;
    };

    ConsoleInterface.prototype.install = function(next) {
      this.docpad.action('install', next);
      return this;
    };

    ConsoleInterface.prototype.render = function(next) {
      var balUtil, basename, commander, data, docpad, filename, opts, renderDocument, stdin, timeout, useStdin;
      docpad = this.docpad;
      commander = this.commander;
      balUtil = require('bal-util');
      opts = {};
      filename = commander.args[0] || null;
      basename = pathUtil.basename(filename);
      opts.filename = filename;
      opts.renderSingleExtensions = 'auto';
      data = '';
      useStdin = true;
      renderDocument = function() {
        return docpad.action('render', opts, function(err, result) {
          if (err) {
            return docpad.fatal(err);
          }
          if (commander.out != null) {
            return balUtil.writeFile(commander.out, result, next);
          } else {
            process.stdout.write(result);
            return next();
          }
        });
      };
      timeout = setTimeout(function() {
        timeout = null;
        if (data.replace(/\s+/, '')) {
          return;
        }
        useStdin = false;
        stdin.pause();
        return renderDocument();
      }, 1000);
      stdin = process.stdin;
      stdin.resume();
      stdin.setEncoding('utf8');
      stdin.on('data', function(_data) {
        return data += _data.toString();
      });
      process.stdin.on('end', function() {
        if (!useStdin) {
          return;
        }
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        opts.data = data;
        return renderDocument();
      });
      return this;
    };

    ConsoleInterface.prototype.run = function(next) {
      this.docpad.action('all', {
        selectSkeletonCallback: this.selectSkeletonCallback
      }, next);
      return this;
    };

    ConsoleInterface.prototype.server = function(next) {
      this.docpad.action('server', next);
      return this;
    };

    ConsoleInterface.prototype.clean = function(next) {
      this.docpad.action('clean', next);
      return this;
    };

    ConsoleInterface.prototype.skeleton = function(next) {
      this.docpad.action('skeleton', {
        selectSkeletonCallback: this.selectSkeletonCallback
      }, next);
      return this;
    };

    ConsoleInterface.prototype.watch = function(next) {
      this.docpad.action('watch', next);
      return this;
    };

    return ConsoleInterface;

  })();

  module.exports = ConsoleInterface;

}).call(this);
