// Generated by CoffeeScript 1.3.3
(function() {
  var CSON, DocumentModel, FileModel, Model, balUtil, mime, pathUtil, yaml, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  pathUtil = require('path');

  balUtil = require('bal-util');

  _ = require('underscore');

  mime = require('mime');

  CSON = null;

  yaml = null;

  Model = require(__dirname + '/../base').Model;

  FileModel = require(__dirname + '/file');

  DocumentModel = (function(_super) {

    __extends(DocumentModel, _super);

    function DocumentModel() {
      return DocumentModel.__super__.constructor.apply(this, arguments);
    }

    DocumentModel.prototype.type = 'document';

    DocumentModel.prototype.meta = null;

    DocumentModel.prototype.defaults = {
      referencesOthers: false,
      header: null,
      parser: null,
      body: null,
      rendered: false,
      contentRendered: false,
      contentRenderedWithoutLayouts: null,
      dynamic: false,
      tags: null,
      renderSingleExtensions: false
    };

    DocumentModel.prototype.initialize = function(data, options) {
      var meta;
      this.layouts = options.layouts, meta = options.meta;
      this.meta = new Model();
      if (meta) {
        this.meta.set(meta);
      }
      return DocumentModel.__super__.initialize.apply(this, arguments);
    };

    DocumentModel.prototype.getMeta = function() {
      return this.meta;
    };

    DocumentModel.prototype.toJSON = function() {
      var data;
      data = DocumentModel.__super__.toJSON.apply(this, arguments);
      data.meta = this.getMeta().toJSON();
      return data;
    };

    DocumentModel.prototype.referencesOthers = function(flag) {
      if (flag == null) {
        flag = true;
      }
      this.set({
        referencesOthers: flag
      });
      return this;
    };

    DocumentModel.prototype.parseData = function(data, next) {
      var key, meta, reset, value, _ref,
        _this = this;
      meta = this.getMeta();
      reset = {};
      _ref = meta.attributes;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        value = _ref[key];
        reset[key] = this.defaults[key];
      }
      reset = balUtil.dereference(reset);
      this.set(reset);
      this.layout = null;
      meta.clear();
      DocumentModel.__super__.parseData.call(this, data, function() {
        var a, b, body, c, content, err, fullPath, header, ignored, match, metaDate, metaUrl, metaUrls, parser, seperator;
        content = _this.get('content');
        match = /^\s*([\-\#][\-\#][\-\#]+) ?(\w*)\s*/.exec(content);
        if (match) {
          seperator = match[1];
          a = match[0].length;
          b = content.indexOf("\n" + seperator, a) + 1;
          c = b + 3;
          fullPath = _this.get('fullPath');
          header = content.substring(a, b);
          body = content.substring(c);
          parser = match[2] || 'yaml';
          try {
            switch (parser) {
              case 'cson':
              case 'coffee':
              case 'coffeescript':
              case 'coffee-script':
                if (!CSON) {
                  CSON = require('cson');
                }
                meta = CSON.parseSync(header);
                _this.meta.set(meta);
                break;
              case 'yaml':
                if (!yaml) {
                  yaml = require('yaml');
                }
                meta = yaml["eval"](header);
                _this.meta.set(meta);
                break;
              default:
                err = new Error("Unknown meta parser: " + parser);
                return next(err);
            }
          } catch (err) {
            return next(err);
          }
        } else {
          body = content;
        }
        body = body.replace(/^\n+/, '');
        _this.set({
          source: content,
          content: body,
          header: header,
          body: body,
          parser: parser,
          name: _this.get('name') || _this.get('title') || _this.get('basename')
        });
        metaDate = _this.meta.get('date');
        if (metaDate) {
          metaDate = new Date(metaDate);
          _this.meta.set({
            date: metaDate
          });
        }
        ignored = _this.meta.get('ignored') || _this.meta.get('ignore') || _this.meta.get('skip') || _this.meta.get('draft') || (_this.meta.get('published') === false);
        if (ignored) {
          _this.meta.set({
            ignored: true
          });
        }
        metaUrls = _this.meta.get('urls');
        metaUrl = _this.meta.get('url');
        if (metaUrls) {
          _this.addUrl(metaUrls);
        }
        if (metaUrl) {
          _this.addUrl(metaUrl);
        }
        _this.set(_this.meta.toJSON());
        return next();
      });
      return this;
    };

    DocumentModel.prototype.writeRendered = function(next) {
      var contentRendered, file, fileOutPath;
      file = this;
      fileOutPath = this.get('outPath');
      contentRendered = this.get('contentRendered');
      file.log('debug', "Writing the rendered file: " + fileOutPath);
      balUtil.writeFile(fileOutPath, contentRendered, function(err) {
        if (err) {
          return next(err);
        }
        file.log('debug', "Wrote the rendered file: " + fileOutPath);
        return next();
      });
      return this;
    };

    DocumentModel.prototype.writeSource = function(next) {
      var body, content, file, fullPath, header, parser, seperator, source;
      file = this;
      if (!CSON) {
        CSON = require('cson');
      }
      fullPath = this.get('fullPath');
      content = this.get('content');
      parser = 'cson';
      seperator = '---';
      file.log('debug', "Writing the source file: " + fullPath);
      header = CSON.stringifySync(this.meta.toJSON());
      content = body = content.replace(/^\s+/, '');
      source = "" + seperator + " " + parser + "\n" + header + "\n" + seperator + "\n\n" + body;
      this.set({
        parser: parser,
        header: header,
        body: body,
        content: content,
        source: source
      });
      balUtil.writeFile(fileOutPath, source, function(err) {
        if (err) {
          return next(err);
        }
        file.log('info', "Wrote the source file: " + fullPath);
        return next();
      });
      return this;
    };

    DocumentModel.prototype.normalize = function(opts, next) {
      var _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      DocumentModel.__super__.normalize.call(this, function() {
        var extensions, outExtension;
        extensions = _this.get('extensions');
        if ((extensions != null) && extensions.length) {
          outExtension = extensions[0];
          _this.set({
            outExtension: outExtension
          });
        }
        return next();
      });
      return this;
    };

    DocumentModel.prototype.contextualize = function(opts, next) {
      var _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      DocumentModel.__super__.contextualize.call(this, function() {
        return _this.getEve(function(err, eve) {
          var basename, changes, extensions, fullPath, meta, name, outContentType, outExtension, outFilename, outPath, relativeDirPath, relativeOutPath, url;
          if (err) {
            return next(err);
          }
          changes = {};
          meta = _this.getMeta();
          fullPath = _this.get('fullPath');
          basename = _this.get('basename');
          relativeDirPath = _this.get('relativeDirPath');
          extensions = _this.get('extensions');
          outExtension = _this.get('outExtension');
          url = meta.get('url');
          name = meta.get('name');
          outPath = meta.get('outPath');
          outFilename = null;
          if (eve != null) {
            outExtension = eve.get('outExtension');
          }
          if (basename && outExtension) {
            if (basename[0] === '.' && outExtension === extensions[0]) {
              outFilename = basename;
            } else {
              outFilename = "" + basename + "." + outExtension;
            }
            changes.outFilename = outFilename;
          }
          if (outFilename) {
            if (relativeDirPath) {
              relativeOutPath = "" + relativeDirPath + "/" + outFilename;
            } else {
              relativeOutPath = "" + outFilename;
            }
            changes.relativeOutPath = relativeOutPath;
            if (!url) {
              changes.url = url = "/" + relativeOutPath;
            }
          }
          if (!name && (outFilename != null)) {
            changes.name = name = outFilename;
          }
          if (_this.outDirPath) {
            changes.outPath = outPath = pathUtil.join(_this.outDirPath, url);
          }
          if (url) {
            _this.removeUrl(_this.get('url'));
            _this.setUrl(url);
          }
          if (outPath || fullPath) {
            changes.outContentType = outContentType = mime.lookup(outPath || fullPath);
          }
          _this.set(changes);
          return next();
        });
      });
      return this;
    };

    DocumentModel.prototype.hasLayout = function() {
      return this.get('layout') != null;
    };

    DocumentModel.prototype.getLayout = function(next) {
      var file, layoutId;
      file = this;
      layoutId = this.get('layout');
      if (!layoutId) {
        return next(null, null);
      } else if (this.layout && layoutId === this.layout.id) {
        return next(null, this.layout);
      } else {
        this.emit('getLayout', {
          layoutId: layoutId
        }, function(err, opts) {
          var layout;
          layout = opts.layout;
          if (err) {
            return next(err);
          } else if (!layout) {
            err = new Error("Could not find the specified layout: " + layoutId);
            return next(err);
          } else {
            file.set({
              'layout': layout.id
            });
            file.layout = layout;
            return next(null, layout);
          }
        });
      }
      return this;
    };

    DocumentModel.prototype.getEve = function(next) {
      if (this.hasLayout()) {
        this.getLayout(function(err, layout) {
          if (err) {
            return next(err, null);
          } else {
            return layout.getEve(next);
          }
        });
      } else {
        next(null, this);
      }
      return this;
    };

    DocumentModel.prototype.renderExtensions = function(opts, next) {
      var content, context, extension, extensions, extensionsReversed, file, filename, index, renderSingleExtensions, result, tasks, templateData, _i, _j, _len, _len1, _ref;
      file = this;
      extensions = this.get('extensions');
      filename = this.get('filename');
      content = opts.content, templateData = opts.templateData, renderSingleExtensions = opts.renderSingleExtensions;
      if (content == null) {
        content = this.get('body');
      }
      if (templateData == null) {
        templateData = {};
      }
      if (renderSingleExtensions == null) {
        renderSingleExtensions = this.get('renderSingleExtensions');
      }
      result = content;
      extensionsReversed = [];
      if (extensions.length === 0 && filename) {
        extensionsReversed.push(filename);
      }
      for (_i = 0, _len = extensions.length; _i < _len; _i++) {
        extension = extensions[_i];
        extensionsReversed.unshift(extension);
      }
      if (renderSingleExtensions && extensionsReversed.length === 1) {
        if (renderSingleExtensions !== 'auto' || filename.replace(/^\./, '') === extensionsReversed[0]) {
          extensionsReversed.push(null);
        }
      }
      if (extensionsReversed.length <= 1) {
        return next(null, result);
      }
      tasks = new balUtil.Group(function(err) {
        return next(err, result);
      });
      _ref = extensionsReversed.slice(1);
      for (index = _j = 0, _len1 = _ref.length; _j < _len1; index = ++_j) {
        extension = _ref[index];
        context = {
          inExtension: extensionsReversed[index],
          outExtension: extension
        };
        tasks.push(context, function(complete) {
          var eventData;
          eventData = {
            inExtension: this.inExtension,
            outExtension: this.outExtension,
            templateData: templateData,
            file: file,
            content: result
          };
          return file.trigger('render', eventData, function(err) {
            if (err) {
              return complete(err);
            }
            result = eventData.content;
            return complete();
          });
        });
      }
      tasks.sync();
      return this;
    };

    DocumentModel.prototype.renderDocument = function(opts, next) {
      var content, eventData, extension, file, templateData, _ref;
      file = this;
      extension = this.get('extensions')[0];
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      content = opts.content, templateData = opts.templateData;
      if (content == null) {
        content = this.get('body');
      }
      if (templateData == null) {
        templateData = {};
      }
      eventData = {
        extension: extension,
        templateData: templateData,
        file: file,
        content: content
      };
      file.trigger('renderDocument', eventData, function(err) {
        return next(err, eventData.content);
      });
      return this;
    };

    DocumentModel.prototype.renderLayouts = function(opts, next) {
      var content, file, templateData, _ref;
      file = this;
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      content = opts.content, templateData = opts.templateData;
      if (content == null) {
        content = this.get('body');
      }
      if (templateData == null) {
        templateData = {};
      }
      return file.getLayout(function(err, layout) {
        if (err) {
          return next(err, content);
        }
        if (layout) {
          templateData.content = content;
          return layout.render({
            templateData: templateData
          }, function(err, result) {
            return next(err, result);
          });
        } else {
          return next(null, content);
        }
      });
    };

    DocumentModel.prototype.render = function(opts, next) {
      var contentRenderedWithoutLayouts, file, fullPath, tasks, _base, _base1, _ref, _ref1, _ref2, _ref3, _ref4;
      if (opts == null) {
        opts = {};
      }
      file = this;
      contentRenderedWithoutLayouts = null;
      fullPath = this.get('fullPath');
      _ref = this.getActionArgs(opts, next), opts = _ref.opts, next = _ref.next;
      opts = _.clone(opts || {});
      if ((_ref1 = opts.actions) == null) {
        opts.actions = ['renderExtensions', 'renderDocument', 'renderLayouts'];
      }
      if ((_ref2 = opts.content) == null) {
        opts.content = this.get('body');
      }
      opts.templateData = _.clone(opts.templateData || {});
      if ((_ref3 = (_base = opts.templateData).document) == null) {
        _base.document = file.toJSON();
      }
      if ((_ref4 = (_base1 = opts.templateData).documentModel) == null) {
        _base1.documentModel = file;
      }
      file.log('debug', "Rendering the file: " + fullPath);
      tasks = new balUtil.Group(function(err) {
        var contentRendered, rendered;
        if (err) {
          file.log('warn', "Something went wrong while rendering: " + fullPath);
          return next(err, opts.content, file);
        }
        contentRendered = opts.content;
        if (contentRenderedWithoutLayouts == null) {
          contentRenderedWithoutLayouts = contentRendered;
        }
        rendered = true;
        file.set({
          contentRendered: contentRendered,
          contentRenderedWithoutLayouts: contentRenderedWithoutLayouts,
          rendered: rendered
        });
        file.log('debug', "Rendering completed for: " + fullPath);
        return next(null, opts.content, file);
      });
      if (__indexOf.call(opts.actions, 'renderExtensions') >= 0) {
        tasks.push(function(complete) {
          return file.renderExtensions(opts, function(err, result) {
            if (err) {
              return complete(err);
            }
            opts.content = result;
            return complete();
          });
        });
      }
      if (__indexOf.call(opts.actions, 'renderDocument') >= 0) {
        tasks.push(function(complete) {
          return file.renderDocument(opts, function(err, result) {
            if (err) {
              return complete(err);
            }
            opts.content = result;
            contentRenderedWithoutLayouts = result;
            return complete();
          });
        });
      }
      if (__indexOf.call(opts.actions, 'renderLayouts') >= 0) {
        tasks.push(function(complete) {
          return file.renderLayouts(opts, function(err, result) {
            if (err) {
              return complete(err);
            }
            opts.content = result;
            return complete();
          });
        });
      }
      tasks.sync();
      return this;
    };

    return DocumentModel;

  })(FileModel);

  module.exports = DocumentModel;

}).call(this);
