// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, FileModel, Model, balUtil, mime, pathUtil, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pathUtil = require('path');

  balUtil = require('bal-util');

  _ = require('underscore');

  mime = require('mime');

  _ref = require(__dirname + '/../base'), Backbone = _ref.Backbone, Model = _ref.Model;

  FileModel = (function(_super) {

    __extends(FileModel, _super);

    function FileModel() {
      return FileModel.__super__.constructor.apply(this, arguments);
    }

    FileModel.prototype.outDirPath = null;

    FileModel.prototype.type = 'file';

    FileModel.prototype.stat = null;

    FileModel.prototype.data = null;

    FileModel.prototype.defaults = {
      id: null,
      basename: null,
      extension: null,
      outExtension: null,
      extensions: null,
      filename: null,
      path: null,
      outPath: null,
      dirPath: null,
      outDirPath: null,
      outFilename: null,
      relativePath: null,
      relativeOutPath: null,
      relativeDirPath: null,
      relativeOutDirPath: null,
      relativeBase: null,
      contentType: null,
      outContentType: null,
      ctime: null,
      mtime: null,
      encoding: null,
      source: null,
      content: null,
      title: null,
      name: null,
      date: null,
      slug: null,
      url: null,
      urls: null,
      ignored: false
    };

    FileModel.prototype.initialize = function(attrs, opts) {
      var data, outDirPath, stat;
      outDirPath = opts.outDirPath, stat = opts.stat, data = opts.data;
      if (attrs.data != null) {
        data = attrs.data;
        delete attrs.data;
        delete this.attributes.data;
      }
      if (outDirPath) {
        this.outDirPath = outDirPath;
      }
      if (stat) {
        this.setStat(stat);
      }
      if (data) {
        this.setData(data);
      }
      this.set({
        extensions: [],
        urls: [],
        id: this.cid
      }, {
        silent: true
      });
      return FileModel.__super__.initialize.apply(this, arguments);
    };

    FileModel.prototype.setData = function(data) {
      this.data = data;
      return this;
    };

    FileModel.prototype.getData = function() {
      return this.data;
    };

    FileModel.prototype.setStat = function(stat) {
      this.stat = stat;
      this.set({
        ctime: new Date(stat.ctime),
        mtime: new Date(stat.mtime)
      });
      return this;
    };

    FileModel.prototype.getAttributes = function() {
      return this.toJSON();
    };

    FileModel.prototype.getMeta = function() {
      return this.meta;
    };

    FileModel.prototype.isText = function() {
      return this.get('encoding') !== 'binary';
    };

    FileModel.prototype.isBinary = function() {
      return this.get('encoding') === 'binary';
    };

    FileModel.prototype.getActionArgs = function(opts, next) {
      if (balUtil.isFunction(opts) && (next != null) === false) {
        next = opts;
        opts = {};
      } else {
        opts || (opts = {});
      }
      next || (next = opts.next || null);
      return {
        next: next,
        opts: opts
      };
    };

    FileModel.prototype.load = function(opts, next) {
      var complete, data, err, file, filePath, fullPath, handleData, handlePath, _ref1;
      if (opts == null) {
        opts = {};
      }
      _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
      file = this;
      filePath = this.get('relativePath') || this.get('fullPath') || this.get('filename');
      fullPath = this.get('fullPath') || filePath || null;
      data = this.getData();
      file.log('debug', "Loading the file: " + filePath);
      complete = function(err) {
        if (err) {
          return next(err);
        }
        file.log('debug', "Loaded the file: " + filePath);
        return next();
      };
      handlePath = function() {
        file.set({
          fullPath: fullPath
        }, {
          silent: true
        });
        return file.readFile(fullPath, complete);
      };
      handleData = function() {
        var _this = this;
        file.set({
          fullPath: null
        }, {
          silent: true
        });
        return file.parseData(data, function(err) {
          if (err) {
            return next(err);
          }
          return file.normalize(function(err) {
            if (err) {
              return next(err);
            }
            return complete();
          });
        });
      };
      if (fullPath) {
        balUtil.exists(fullPath, function(exists) {
          if (exists) {
            return handlePath();
          } else {
            return handleData();
          }
        });
      } else if (data) {
        handleData();
      } else {
        err = new Error('Nothing to load');
        return next(err);
      }
      return this;
    };

    FileModel.prototype.readFile = function(fullPath, next) {
      var file, tasks,
        _this = this;
      file = this;
      fullPath = this.get('fullPath');
      file.log('debug', "Reading the file: " + fullPath);
      tasks = new balUtil.Group(function(err) {
        if (err) {
          file.log('err', "Failed to read the file: " + fullPath);
          return next(err);
        } else {
          return _this.normalize(function(err) {
            if (err) {
              return next(err);
            }
            file.log('debug', "Read the file: " + fullPath);
            return next();
          });
        }
      });
      tasks.total = 2;
      if (file.stat) {
        tasks.complete();
      } else {
        balUtil.stat(fullPath, function(err, fileStat) {
          if (err) {
            return next(err);
          }
          file.stat = fileStat;
          return tasks.complete();
        });
      }
      balUtil.readFile(fullPath, function(err, data) {
        if (err) {
          return next(err);
        }
        return file.parseData(data, tasks.completer());
      });
      return this;
    };

    FileModel.prototype.getEncoding = function(buffer) {
      var charCode, contentStartBinary, contentStartUTF8, encoding, i, _i, _ref1;
      contentStartBinary = buffer.toString('binary', 0, 24);
      contentStartUTF8 = buffer.toString('utf8', 0, 24);
      encoding = 'utf8';
      for (i = _i = 0, _ref1 = contentStartUTF8.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        charCode = contentStartUTF8.charCodeAt(i);
        if (charCode === 65533 || charCode <= 8) {
          encoding = 'binary';
          break;
        }
      }
      return encoding;
    };

    FileModel.prototype.parseData = function(data, next) {
      var content, encoding, source;
      encoding = 'utf8';
      if (data instanceof Buffer) {
        encoding = this.getEncoding(data);
        if (encoding === 'binary') {
          source = '';
        } else {
          source = data.toString(encoding);
        }
      } else if (balUtil.isString(data)) {
        source = data;
      } else {
        source = '';
      }
      content = source.replace(/\r\n?/gm, '\n').replace(/\t/g, '    ');
      this.setData(data);
      this.set({
        source: source,
        content: content,
        encoding: encoding
      });
      next();
      return this;
    };

    FileModel.prototype.setUrl = function(url) {
      this.addUrl(url);
      this.set({
        url: url
      });
      return this;
    };

    FileModel.prototype.addUrl = function(url) {
      var existingUrl, found, newUrl, urls, _i, _j, _len, _len1;
      if (url instanceof Array) {
        for (_i = 0, _len = url.length; _i < _len; _i++) {
          newUrl = url[_i];
          this.addUrl(newUrl);
        }
      } else if (url) {
        found = false;
        urls = this.get('urls');
        for (_j = 0, _len1 = urls.length; _j < _len1; _j++) {
          existingUrl = urls[_j];
          if (existingUrl === url) {
            found = true;
            break;
          }
        }
        if (!found) {
          urls.push(url);
        }
      }
      return this;
    };

    FileModel.prototype.removeUrl = function(userUrl) {
      var index, url, urls, _i, _len;
      urls = this.get('urls');
      for (index = _i = 0, _len = urls.length; _i < _len; index = ++_i) {
        url = urls[index];
        if (url === userUrl) {
          urls.remove(index);
          break;
        }
      }
      return this;
    };

    FileModel.prototype.getPath = function(relativePath, parentPath) {
      var path, relativeDirPath;
      if (/^\./.test(relativePath)) {
        relativeDirPath = this.get('relativeDirPath');
        path = pathUtil.join(relativeDirPath, relativePath);
      } else {
        if (parentPath) {
          path = pathUtil.join(parentPath, relativePath);
        } else {
          path = relativePath;
        }
      }
      return path;
    };

    FileModel.prototype.normalize = function(opts, next) {
      var basename, changes, contentType, date, extension, extensions, filename, fullDirPath, fullPath, id, mtime, relativeBase, relativeDirPath, relativePath, _ref1;
      if (opts == null) {
        opts = {};
      }
      changes = {};
      _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
      basename = this.get('basename');
      filename = this.get('filename');
      fullPath = this.get('fullPath');
      extensions = this.get('extensions');
      relativePath = this.get('relativePath');
      mtime = this.get('mtime');
      if (fullPath) {
        changes.filename = filename = pathUtil.basename(fullPath);
        changes.outFilename = filename;
      }
      if (filename) {
        if (filename[0] === '.') {
          basename = filename.replace(/^(\.[^\.]+)\..*$/, '$1');
        } else {
          basename = filename.replace(/\..*$/, '');
        }
        changes.basename = basename;
        if ((extensions != null) === false || extensions.length === 0) {
          extensions = filename.split(/\./g);
          extensions.shift();
        }
        changes.extensions = extensions;
        if (extensions.length) {
          extension = extensions[extensions.length - 1];
        } else {
          extension = null;
        }
        changes.extension = extension;
        changes.outExtension = extension;
      }
      if (fullPath) {
        changes.fullDirPath = fullDirPath = pathUtil.dirname(fullPath) || '';
        changes.contentType = contentType = mime.lookup(fullPath);
        changes.outContentType = contentType;
      }
      if (relativePath) {
        changes.relativeDirPath = relativeDirPath = pathUtil.dirname(relativePath).replace(/^\.$/, '') || '';
        changes.relativeBase = relativeBase = relativeDirPath ? pathUtil.join(relativeDirPath, basename) : basename;
        changes.id = id = relativePath;
      }
      if (mtime) {
        changes.date = date = mtime;
      }
      this.set(changes);
      next();
      return this;
    };

    FileModel.prototype.contextualize = function(opts, next) {
      var changes, filename, name, outDirPath, outPath, relativeBase, relativeDirPath, relativeOutDirPath, relativeOutPath, relativePath, slug, url, _ref1;
      if (opts == null) {
        opts = {};
      }
      changes = {};
      _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
      relativePath = this.get('relativePath');
      relativeDirPath = this.get('relativeDirPath');
      relativeBase = this.get('relativeBase');
      filename = this.get('filename');
      outPath = this.get('outPath');
      outDirPath = this.get('outDirPath');
      if (relativePath) {
        url = "/" + relativePath;
        this.setUrl(url);
      }
      if (relativeBase) {
        changes.slug = slug = balUtil.generateSlugSync(relativeBase);
      }
      if (filename) {
        changes.name = name = filename;
      }
      if (this.outDirPath && relativePath) {
        if (relativeDirPath != null) {
          changes.relativeOutDirPath = relativeOutDirPath = relativeDirPath;
        }
        changes.relativeOutPath = relativeOutPath = relativePath;
        changes.outPath = outPath = pathUtil.join(this.outDirPath, relativePath);
        if (outPath) {
          changes.outDirPath = outDirPath = pathUtil.dirname(outPath);
        }
      }
      this.set(changes);
      next();
      return this;
    };

    FileModel.prototype.write = function(next) {
      var content, encoding, file, fileOutPath;
      file = this;
      fileOutPath = this.get('outPath');
      content = this.get('content') || this.getData();
      encoding = this.get('encoding');
      file.log('debug', "Writing the file: " + fileOutPath);
      balUtil.writeFile(fileOutPath, content, encoding, function(err) {
        if (err) {
          return next(err);
        }
        file.log('debug', "Wrote the file: " + fileOutPath);
        return next();
      });
      return this;
    };

    FileModel.prototype["delete"] = function(next) {
      var file, fileOutPath;
      file = this;
      fileOutPath = this.get('outPath');
      file.log('debug', "Delete the file: " + fileOutPath);
      balUtil.unlink(fileOutPath, function(err) {
        if (err) {
          return next(err);
        }
        file.log('debug', "Deleted the file: " + fileOutPath);
        return next();
      });
      return this;
    };

    return FileModel;

  })(Model);

  module.exports = FileModel;

}).call(this);
