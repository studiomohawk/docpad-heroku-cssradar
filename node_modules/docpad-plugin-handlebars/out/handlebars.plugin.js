// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var HandlebarsPlugin;
    return HandlebarsPlugin = (function(_super) {

      __extends(HandlebarsPlugin, _super);

      HandlebarsPlugin.prototype.name = 'handlebars';

      HandlebarsPlugin.prototype.handlebars = null;

      function HandlebarsPlugin() {
        var config, docpad, handlebars, helper, name, _ref;
        HandlebarsPlugin.__super__.constructor.apply(this, arguments);
        docpad = this.docpad;
        config = this.config;
        handlebars = this.handlebars = require('handlebars');
        if (this.config.helpers) {
          _ref = this.config.helpers;
          for (name in _ref) {
            if (!__hasProp.call(_ref, name)) continue;
            helper = _ref[name];
            handlebars.registerHelper(name, helper);
          }
        }
      }

      HandlebarsPlugin.prototype.render = function(opts) {
        var content, handlebars, inExtension, templateData;
        inExtension = opts.inExtension, templateData = opts.templateData, content = opts.content;
        handlebars = this.handlebars;
        if (inExtension === 'hb' || inExtension === 'hbs' || inExtension === 'handlebars') {
          return opts.content = handlebars.compile(opts.content)(templateData);
        }
      };

      return HandlebarsPlugin;

    })(BasePlugin);
  };

}).call(this);
